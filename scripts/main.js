import Header from "./Header.js";
new Header();

document.addEventListener("DOMContentLoaded", () => {
    /* === –ü–∞–Ω–µ–ª—å –≤–µ—Ä—Å–∏–∏ –¥–ª—è —Å–ª–∞–±–æ–≤–∏–¥—è—â–∏—Ö === */
    const panel = document.getElementById("vision-panel");
    const toggleBtn = document.getElementById("toggle-vision");
    const resetBtn = document.getElementById("reset-vision");

    if (toggleBtn && panel) {
        toggleBtn.addEventListener("click", () => {
            panel.classList.toggle("hidden");
        });
    }

    // –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
    document.querySelectorAll("[data-font]").forEach((btn) => {
        btn.addEventListener("click", () => {
            const action = btn.dataset.font;
            const body = document.body;
            let size = parseInt(window.getComputedStyle(body).fontSize, 10);

            if (action === "increase") size += 2;
            if (action === "decrease" && size > 10) size -= 2;

            body.style.fontSize = size + "px";
            localStorage.setItem("fontSize", size);
        });
    });

    // –¶–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã
    document.querySelectorAll("[data-theme]").forEach((btn) => {
        btn.addEventListener("click", () => {
            document.body.dataset.theme = btn.dataset.theme;
            localStorage.setItem("theme", btn.dataset.theme);
        });
    });

    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ–∫–∞–∑–∞—Ç—å / —Å–∫—Ä—ã—Ç—å / —á/–±)
    document.querySelectorAll("[data-images]").forEach((btn) => {
        btn.addEventListener("click", () => {
            const imgs = document.querySelectorAll("img");
            const mode = btn.dataset.images;
            if (mode === "off") {
                imgs.forEach((img) => (img.style.display = "none"));
            } else if (mode === "grayscale") {
                imgs.forEach((img) => {
                    img.style.display = "";
                    img.classList.add("grayscale");
                });
            } else {
                imgs.forEach((img) => {
                    img.style.display = "";
                    img.classList.remove("grayscale");
                });
            }
            localStorage.setItem("images", mode);
        });
    });

    // –ú–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    document.querySelectorAll("[data-line]").forEach((btn) => {
        btn.addEventListener("click", () => {
            let lineHeight = "1.5";
            if (btn.dataset.line === "medium") lineHeight = "1.75";
            if (btn.dataset.line === "large") lineHeight = "2";
            document.body.style.lineHeight = lineHeight;
            localStorage.setItem("lineHeight", lineHeight);
        });
    });

    // –ú–µ–∂–±—É–∫–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    document.querySelectorAll("[data-letter]").forEach((btn) => {
        btn.addEventListener("click", () => {
            let spacing = "normal";
            if (btn.dataset.letter === "wide") spacing = "0.1em";
            if (btn.dataset.letter === "extra") spacing = "0.2em";
            document.body.style.letterSpacing = spacing;
            localStorage.setItem("letterSpacing", spacing);
        });
    });

    // –®—Ä–∏—Ñ—Ç
    document.querySelectorAll("[data-fonttype]").forEach((btn) => {
        btn.addEventListener("click", () => {
            if (btn.dataset.fonttype === "serif") {
                document.body.style.fontFamily = "serif";
            } else {
                document.body.style.fontFamily = "Arial, sans-serif";
            }
            localStorage.setItem("fontType", btn.dataset.fonttype);
        });
    });

    /* === üé§ –°–ò–ù–¢–ï–ó –†–ï–ß–ò –¢–û–õ–¨–ö–û –ü–û –ù–ê–í–ï–î–ï–ù–ò–Æ (–ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏) === */
    const toggleSpeechBtn =
        document.getElementById("speak-btn") ||
        document.getElementById("toggle-speech"); // –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–æ–∏—Ö id

    let speechEnabled = false;
    let voices = [];
    let ruVoice = null;
    let lastSpokenEl = null;

    function loadVoices() {
        voices = window.speechSynthesis ? speechSynthesis.getVoices() : [];
        ruVoice =
            voices.find((v) => v.lang && v.lang.toLowerCase().startsWith("ru")) ||
            null;
    }
    if ("speechSynthesis" in window) {
        speechSynthesis.onvoiceschanged = loadVoices;
        loadVoices();
    }

    function speak(text) {
        if (!("speechSynthesis" in window)) return;
        if (!text) return;
        const u = new SpeechSynthesisUtterance(text);
        u.lang = "ru-RU";
        if (ruVoice) u.voice = ruVoice;
        u.rate = 1;
        u.pitch = 1;
        speechSynthesis.cancel();
        speechSynthesis.speak(u);
    }

    function getReadableText(el) {
        if (!el || el.nodeType !== 1) return "";

        // 1) –ü—Ä—è–º–æ–π —Ç–µ–∫—Å—Ç
        let text = (el.innerText || el.textContent || "").trim();

        // 2) –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        if (!text) {
            const aria = el.getAttribute("aria-label");
            if (aria) text = aria.trim();
        }
        if (!text) {
            const title = el.getAttribute("title");
            if (title) text = title.trim();
        }
        if (!text && (el.tagName === "IMG" || el.tagName === "AREA")) {
            const alt = el.getAttribute("alt");
            if (alt) text = alt.trim();
        }
        if (!text && (el.tagName === "INPUT" || el.tagName === "TEXTAREA")) {
            const val = el.value?.toString().trim();
            const ph = el.getAttribute("placeholder")?.trim();
            text = val || ph || "";
            if (!text && el.id) {
                const lbl = document.querySelector(`label[for="${el.id}"]`);
                if (lbl) text = (lbl.innerText || lbl.textContent || "").trim();
            }
        }
        if (!text && el.tagName === "BUTTON") {
            const v = el.value?.toString().trim();
            if (v) text = v;
        }

        // 3) –ï—Å–ª–∏ —É —Ç–µ–∫—É—â–µ–≥–æ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ ‚Äî –ø–æ–¥–Ω–∏–º–∞–µ–º—Å—è –≤–≤–µ—Ä—Ö –¥–æ 3 —É—Ä–æ–≤–Ω–µ–π
        let level = 0;
        let cur = el;
        while ((!text || text.length < 2) && cur && cur.parentElement && level < 3) {
            cur = cur.parentElement;
            const t = (cur.innerText || cur.textContent || "").trim();
            if (t && t.length > 1) {
                text = t;
                break;
            }
            level++;
        }

        // –ó–∞—â–∏—Ç–∞ –æ—Ç —á—Ç–µ–Ω–∏—è –≤—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        if (text && text.length > 1500) text = text.slice(0, 1500);
        return text || "";
    }

    if (toggleSpeechBtn) {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞
        toggleSpeechBtn.addEventListener("click", () => {
            speechEnabled = !speechEnabled;
            if ("speechSynthesis" in window) speechSynthesis.cancel();

            // –û–∑–≤—É—á–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            speak(speechEnabled ? "–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –≤–∫–ª—é—á–µ–Ω" : "–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –≤—ã–∫–ª—é—á–µ–Ω");

            // (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
            toggleSpeechBtn.classList.toggle("active", speechEnabled);
            if (!toggleSpeechBtn.dataset.staticLabel) {
                toggleSpeechBtn.textContent = speechEnabled ? "üîä" : "üëÅ";
            }
        });

        // –ß—Ç–µ–Ω–∏–µ –ø–æ –Ω–∞–≤–µ–¥–µ–Ω–∏—é ‚Äî –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤–µ—Å—å –¥–æ–∫—É–º–µ–Ω—Ç
        document.body.addEventListener(
            "pointerover",
            (e) => {
                if (!speechEnabled) return;
                const el = e.target;
                if (el === lastSpokenEl) return;

                const text = getReadableText(el);
                if (text) {
                    lastSpokenEl = el;
                    speak(text);
                }
            },
            true
        );

        // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —á—Ç–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —É—Ö–æ–¥–∏–º –∫—É—Ä—Å–æ—Ä–æ–º —Å —ç–ª–µ–º–µ–Ω—Ç–∞
        document.body.addEventListener(
            "pointerover",
            (e) => {
                if (!speechEnabled) return;
                const el = e.target;
                if (el === lastSpokenEl) return;

                const text = getReadableText(el);
                if (text) {
                    lastSpokenEl = el;
                    // —Å—Ä–∞–∑—É –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∏ —Å—Ä–∞–∑—É –∂–µ –≥–æ–≤–æ—Ä–∏–º
                    speechSynthesis.cancel();

                    const u = new SpeechSynthesisUtterance(text);
                    u.lang = "ru-RU";
                    if (ruVoice) u.voice = ruVoice;
                    u.rate = 1;
                    u.pitch = 1;

                    speechSynthesis.speak(u);
                }
            },
            true
        );
    }

    // –°–±—Ä–æ—Å
    if (resetBtn) {
        resetBtn.addEventListener("click", () => {
            localStorage.clear();
            if ("speechSynthesis" in window) speechSynthesis.cancel();
            location.reload();
        });
    }

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    const savedFont = localStorage.getItem("fontSize");
    if (savedFont) document.body.style.fontSize = savedFont + "px";
    const savedTheme = localStorage.getItem("theme");
    if (savedTheme) document.body.dataset.theme = savedTheme;
    const savedImages = localStorage.getItem("images");
    if (savedImages === "off") {
        document.querySelectorAll("img").forEach((img) => (img.style.display = "none"));
    } else if (savedImages === "grayscale") {
        document.querySelectorAll("img").forEach((img) => img.classList.add("grayscale"));
    }
    const savedLH = localStorage.getItem("lineHeight");
    if (savedLH) document.body.style.lineHeight = savedLH;
    const savedLS = localStorage.getItem("letterSpacing");
    if (savedLS) document.body.style.letterSpacing = savedLS;
    if (localStorage.getItem("fontType") === "serif") {
        document.body.style.fontFamily = "serif";
    }
});